import copy
import struct

import globalvars
from steam3.Types.emsg import EMsg
from steam3.Types.steam_types import SystemIMType

from steam3.cm_packet_utils import CMResponse
from steam3.messages.MsgClientMarketingMessageUpdate import MsgClientMarketingMessageUpdate


def build_client_newsupdate_response(client_obj):
    """
    enum ENewsUpdateType : __int32
    {
      k_EAppNews = 0x0,
      k_ESteamAds = 0x1,
      k_ESteamNews = 0x2,
      k_ECDDBUpdate = 0x3,
      k_EClientUpdate = 0x4,
    };
    """
    packet = CMResponse(eMsgID = EMsg.ClientNewsUpdate, client_obj = client_obj)
    # FIXME Use the news manager!
    newsid = [0x02B7, 0x02AF, 0x02AE, 0x02A8, 0x02A9, 0x0297, 0x028B, 0x0283, 0x027D, 0x0265, 0x0244, 0x0244, 0x0204, 0x0203, 0x01F4, 0x01F2, 0x01F2, 0x01F2, 0x01EC, 0x01EB, 0x01EB, 0x01EB, 0x01E6, 0x01E1, 0x01E1, 0x01E1, 0x01E1, 0x01E1]
    appid = [0x0514, 0x09C4, 0x0140, 0x012C, 0x017C, 0x04B0, 0x076C, 0x00DC, 0x00F0, 0x0168, 0x0521, 0x051D, 0x000A, 0x05DC, 0x00D3, 0x00DB, 0x0154, 0x0118, 0x05DE, 0x0050, 0x001E, 0x0046, 0x03EA, 0x0014, 0x003C, 0x0032, 0x0028, 0x0082]

    packet_data = struct.pack('H',
                              len(newsid))
    news_type = 0
    # FIXME need to include type and i think a few other things to this packet in order for it to consistently show shit
    for key, value in zip(newsid, appid):
        packet.data += struct.pack('<B I I', news_type, key, value)

    """find_closest_news_update = NewsManager.find_closest_news_update()
    packet.data = b'$\x01\x00\xd3\x05\x00\x00|$\x00\x00\x00\xd3\x05\x00\x00\xd0\x11\x00\x00\x00\xd1\x05\x00\x00\x903\x00\x00\x00\xd1\x05\x00\x00\x9a3\x00\x00\x00\xd1\x05\x00\x00\xae3\x00\x00\x00\xd1\x05\x00\x00\xb83\x00\x00\x00\xd1\x05\x00\x00\xc23\x00\x00\x00\xcb\x05\x00\x00\xb8\x01\x00\x00\x00\xce\x05\x00\x00@\x01\x00\x00\x00\xce\x05\x00\x00\xdc\x00\x00\x00\x00\xce\x05\x00\x00\x90\x01\x00\x00\x00\xce\x05\x00\x00T\x01\x00\x00\x00\xce\x05\x00\x00|\x01\x00\x00\x00\xce\x05\x00\x00\x9a\x01\x00\x00\x00\xce\x05\x00\x00\xa4\x01\x00\x00\x00\xce\x05\x00\x00\xdb\x00\x00\x00\x00\xca\x05\x00\x00\x98!\x00\x00\x00\xc8\x05\x00\x00\xf0(\x00\x00\x00\xc8\x05\x00\x00\xb4(\x00\x00\x00\xc6\x05\x00\x00`\t\x00\x00\x00\xc3\x05\x00\x00d2\x00\x00\x00\xc3\x05\x00\x00n2\x00\x00\x00\xc1\x05\x00\x00\xa4\x10\x00\x00\x00\xc1\x05\x00\x00\x86\x10\x00\x00\x00\xc0\x05\x00\x00\x80\x07\x00\x00\x00\xb3\x05\x00\x00\xea$\x00\x00\x00\xb3\x05\x00\x00h$\x00\x00\x00\xb3\x05\x00\x00r$\x00\x00\x00\xbe\x05\x00\x00T$\x00\x00\x00\xbb\x05\x00\x00\xcc)\x00\x00\x00\xba\x05\x00\x00\xec\t\x00\x00\x00\xba\x05\x00\x00\x00\n\x00\x00\x00\xb9\x05\x00\x00\xf4$\x00\x00\x00\xad\x05\x00\x00\xdc(\x00\x00\x00\xa2\x05\x00\x00\x0c0\x00\x00\x00\x9f\x05\x00\x00*0\x00\x00\x00\x98\x05\x00\x00\xa0\n\x00\x00\x00\x98\x05\x00\x00\xaa\n\x00\x00\x00\x94\x05\x00\x00\x04\x1f\x00\x00\x00\x8e\x05\x00\x00\xa0\x0f\x00\x00\x00\x8d\x05\x00\x00\xd40\x00\x00\x00\x8d\x05\x00\x00\xde0\x00\x00\x00\x8d\x05\x00\x00\xe80\x00\x00\x00\x8d\x05\x00\x00\xf20\x00\x00\x00\x86\x05\x00\x004!\x00\x00\x00\x82\x05\x00\x00\x160\x00\x00\x00}\x05\x00\x00\x10\'\x00\x00\x00y\x05\x00\x00x\x05\x00\x00\x00x\x05\x00\x00P\x00\x00\x00\x00x\x05\x00\x00\n\x00\x00\x00\x00s\x05\x00\x00\x8a/\x00\x00\x00s\x05\x00\x00\x94/\x00\x00\x00s\x05\x00\x00\x9e/\x00\x00\x00s\x05\x00\x00D/\x00\x00\x00s\x05\x00\x00N/\x00\x00\x00s\x05\x00\x00X/\x00\x00\x00s\x05\x00\x00b/\x00\x00\x00s\x05\x00\x00l/\x00\x00\x00s\x05\x00\x00v/\x00\x00\x00s\x05\x00\x00\x80/\x00\x00\x00r\x05\x00\x00\x1c%\x00\x00\x00r\x05\x00\x00&%\x00\x00\x00n\x05\x00\x00\xfa\n\x00\x00\x00m\x05\x00\x00\xf0\n\x00\x00\x00c\x05\x00\x00\xc0+\x00\x00\x00Y\x05\x00\x00\x92\x18\x00\x00\x00M\x05\x00\x00\xc8(\x00\x00\x00a\x05\x00\x00@\x1f\x00\x00\x00a\x05\x00\x00\x8a\x1b\x00\x00\x00a\x05\x00\x00\x12\x1b\x00\x00\x00a\x05\x00\x00^\x1f\x00\x00\x00a\x05\x00\x00\xa8\x1b\x00\x00\x00a\x05\x00\x00b\x1b\x00\x00\x00a\x05\x00\x00\xe0\x1a\x00\x00\x00a\x05\x00\x00\x90\x1f\x00\x00\x00a\x05\x00\x00l\x1b\x00\x00\x00`\x05\x00\x00~\x18\x00\x00\x00`\x05\x00\x00L\x18\x00\x00\x00`\x05\x00\x00T\x06\x00\x00\x00`\x05\x00\x00r\x0b\x00\x00\x00`\x05\x00\x00V\x18\x00\x00\x00`\x05\x00\x00\xae\x0b\x00\x00\x00`\x05\x00\x00^\x06\x00\x00\x00`\x05\x00\x00\x9a\x06\x00\x00\x00`\x05\x00\x00h\x06\x00\x00\x00`\x05\x00\x00@\x06\x00\x00\x00`\x05\x00\x00T\x0b\x00\x00\x00`\x05\x00\x00j\x18\x00\x00\x00`\x05\x00\x00^\x0b\x00\x00\x00`\x05\x00\x00\x86\x06\x00\x00\x00`\x05\x00\x008\x18\x00\x00\x00`\x05\x00\x00h\x0b\x00\x00\x00`\x05\x00\x00t\x18\x00\x00\x00`\x05\x00\x00J\x06\x00\x00\x00`\x05\x00\x00B\x18\x00\x00\x00O\x05\x00\x00\xdc\x05\x00\x00\x00O\x05\x00\x00\xf0\x05\x00\x00\x00O\x05\x00\x00\xde\x05\x00\x00\x00O\x05\x00\x00\xf2\x05\x00\x00\x00O\x05\x00\x00\xe6\x05\x00\x00\x00L\x05\x00\x00\xbe(\x00\x00\x00N\x05\x00\x00\xb8$\x00\x00\x00J\x05\x00\x00\xb6\r\x00\x00\x00I\x05\x00\x00\xba,\x00\x00\x00E\x05\x00\x00\xf6\x1d\x00\x00\x00;\x05\x00\x002\n\x00\x00\x004\x05\x00\x00\xb6\x12\x00\x00\x004\x05\x00\x00\xa0(\x00\x00\x005\x05\x00\x00\xd7\x00\x00\x00\x00+\x05\x00\x00\x1a\'\x00\x00\x00*\x05\x00\x00\x1e\x1e\x00\x00\x00\x1a\x05\x00\x00*\r\x00\x00\x00\x1a\x05\x00\x00\x8e\r\x00\x00\x00\x18\x05\x00\x00\xc4\t\x00\x00\x00\x18\x05\x00\x00\xce\t\x00\x00\x00\x1c\x05\x00\x00,\x01\x00\x00\x00\x1c\x05\x00\x00\xf0\x00\x00\x00\x00\x16\x05\x00\x00P\n\x00\x00\x00\x16\x05\x00\x00<\n\x00\x00\x00\x16\x05\x00\x00F\n\x00\x00\x00\x14\x05\x00\x00L\x1d\x00\x00\x00\xa0\x04\x00\x00\xcc\x0b\x00\x00\x00\x0f\x05\x00\x00\xca+\x00\x00\x00\x0f\x05\x00\x00\x1e\n\x00\x00\x00\x0f\x05\x00\x00\x8d\x13\x00\x00\x00\x0b\x05\x00\x00\x12 \x00\x00\x00\x0b\x05\x00\x00& \x00\x00\x00\x0b\x05\x00\x000 \x00\x00\x00\x0b\x05\x00\x00: \x00\x00\x00\x0b\x05\x00\x00\x08 \x00\x00\x001\x04\x00\x00\x1c \x00\x00\x00\xfb\x04\x00\x00\x8a\x0c\x00\x00\x00\xfb\x04\x00\x00\xc6\x0c\x00\x00\x00\xfb\x04\x00\x00\xd0\x0c\x00\x00\x00\xfb\x04\x00\x00\x80\x0c\x00\x00\x00\xf7\x04\x00\x00\xce,\x00\x00\x00\xf3\x04\x00\x00\x9c,\x00\x00\x00\xef\x04\x00\x00\x96\x0f\x00\x00\x00\xef\x04\x00\x00\xba\x1d\x00\x00\x00\xef\x04\x00\x00\xc4\x1d\x00\x00\x00\xef\x04\x00\x00`"\x00\x00\x00\xef\x04\x00\x00t"\x00\x00\x00\xef\x04\x00\x00\x82\x0f\x00\x00\x00\xed\x04\x00\x00\xac\r\x00\x00\x00\xe4\x04\x00\x00\xc2\x10\x00\x00\x00\xd5\x04\x00\x00\x18\x01\x00\x00\x00\xd7\x04\x00\x00<\x0f\x00\x00\x00\xa8\x04\x00\x00R\x1c\x00\x00\x00\x9f\x04\x00\x00h\x1f\x00\x00\x00\xa2\x04\x00\x00\x9b\r\x00\x00\x00\x9d\x04\x00\x00\xde\x12\x00\x00\x00\x9d\x04\x00\x00\x94\x11\x00\x00\x00\x98\x04\x00\x00\x82\n\x00\x00\x00\x9a\x04\x00\x00\xbc\x0c\x00\x00\x00\x99\x04\x00\x00\xb0\x04\x00\x00\x00\x94\x04\x00\x00\xac\x12\x00\x00\x00\x94\x04\x00\x00\\\x12\x00\x00\x00\x94\x04\x00\x00f\x12\x00\x00\x00\x94\x04\x00\x00\x84\x12\x00\x00\x00\x94\x04\x00\x00\x98\x12\x00\x00\x00\x94\x04\x00\x00\xa2\x12\x00\x00\x00\x91\x04\x00\x00\xaa\x19\x00\x00\x00\x8a\x04\x00\x00\xac!\x00\x00\x00\x84\x04\x00\x00\x8c\x19\x00\x00\x00\x84\x04\x00\x00n\x19\x00\x00\x00\x84\x04\x00\x00\x82\x19\x00\x00\x00\x7f\x04\x00\x00\xda\x11\x00\x00\x00\x7f\x04\x00\x00\xe4\x11\x00\x00\x00i\x04\x00\x00\x9e\x0c\x00\x00\x00u\x04\x00\x00\x98\x08\x00\x00\x00u\x04\x00\x00Z#\x00\x00\x00u\x04\x00\x00\xde\x08\x00\x00\x00u\x04\x00\x00d#\x00\x00\x00u\x04\x00\x00\xfc\x08\x00\x00\x00u\x04\x00\x00n#\x00\x00\x00u\x04\x00\x00\x06\t\x00\x00\x00u\x04\x00\x00x#\x00\x00\x00u\x04\x00\x00\x10\t\x00\x00\x00u\x04\x00\x00\x82#\x00\x00\x00u\x04\x00\x00\x1a\t\x00\x00\x00u\x04\x00\x00\x8c#\x00\x00\x00u\x04\x00\x00$\t\x00\x00\x00u\x04\x00\x00\xa0#\x00\x00\x00u\x04\x00\x00.\t\x00\x00\x00u\x04\x00\x00\xaa#\x00\x00\x00u\x04\x00\x008\t\x00\x00\x00u\x04\x00\x00B\t\x00\x00\x00u\x04\x00\x002#\x00\x00\x00u\x04\x00\x00F#\x00\x00\x00u\x04\x00\x00P#\x00\x00\x00h\x04\x00\x00\x94\x0c\x00\x00\x00[\x04\x00\x00\xa8\x11\x00\x00\x00[\x04\x00\x00\xb2\x11\x00\x00\x00[\x04\x00\x00\xbc\x11\x00\x00\x00[\x04\x00\x00\xc6\x11\x00\x00\x00[\x04\x00\x00\x9e\x11\x00\x00\x00J\x04\x00\x00\x14\x19\x00\x00\x00X\x04\x00\x00\n\n\x00\x00\x00O\x04\x00\x00\xee\x0c\x00\x00\x00O\x04\x00\x00p\r\x00\x00\x00O\x04\x00\x00 \r\x00\x00\x00O\x04\x00\x00H\r\x00\x00\x00O\x04\x00\x00\xf8\x0c\x00\x00\x00O\x04\x00\x00z\r\x00\x00\x00O\x04\x00\x00R\r\x00\x00\x00O\x04\x00\x00\x02\r\x00\x00\x00O\x04\x00\x00\x84\r\x00\x00\x00O\x04\x00\x00\\\r\x00\x00\x00O\x04\x00\x00\x0c\r\x00\x00\x00O\x04\x00\x004\r\x00\x00\x00O\x04\x00\x00\x98\r\x00\x00\x00O\x04\x00\x00\xe4\x0c\x00\x00\x00O\x04\x00\x00\xa2\r\x00\x00\x00O\x04\x00\x00\x16\r\x00\x00\x00O\x04\x00\x00>\r\x00\x00\x00H\x04\x00\x00\xea\x03\x00\x00\x00H\x04\x00\x00\xeb\x03\x00\x00\x00H\x04\x00\x00\xd8\t\x00\x00\x00H\x04\x00\x00\xe2\t\x00\x00\x00H\x04\x00\x00\xd4\x17\x00\x00\x00H\x04\x00\x00\xd0 \x00\x00\x00H\x04\x00\x00\xe7\t\x00\x00\x00F\x04\x00\x00\xc2\x1a\x00\x00\x00F\x04\x00\x00\xcc\x1a\x00\x00\x00F\x04\x00\x00&\x1b\x00\x00\x00F\x04\x00\x00\xf4\x1a\x00\x00\x00*\x04\x00\x00\xdc\x1e\x00\x00\x00*\x04\x00\x00\xe6\x1e\x00\x00\x008\x04\x00\x00D\x11\x00\x00\x006\x04\x00\x00 \x1c\x00\x00\x00/\x04\x00\x00\x96\x19\x00\x00\x00\x1d\x04\x00\x00\xb8\x1a\x00\x00\x00\x1d\x04\x00\x00\x1c\x1b\x00\x00\x00\x1d\x04\x00\x00\xd6\x1a\x00\x00\x00\x1d\x04\x00\x00\xa4\x1a\x00\x00\x00\x17\x04\x00\x00J\x1f\x00\x00\x00\x13\x04\x00\x00\x82\x1e\x00\x00\x00\x11\x04\x00\x00x\x1e\x00\x00\x00\x0b\x04\x00\x00\xfc\x1c\x00\x00\x00\x07\x04\x00\x00\x94\x1b\x00\x00\x00\x04\x04\x00\x00\xb0\x1d\x00\x00\x00\x03\x04\x00\x00\xe2\x1d\x00\x00\x00\xff\x03\x00\x00\xa6\x18\x00\x00\x00\xfb\x03\x00\x00(\x00\x00\x00\x00\xfb\x03\x00\x00\x14\x00\x00\x00\x00\xf8\x03\x00\x00x\n\x00\x00\x00\xf2\x03\x00\x00\x8c\x0f\x00\x00\x00\xf0\x03\x00\x00\xa4\x06\x00\x00\x00\xec\x03\x00\x00v\x1b\x00\x00\x00\xec\x03\x00\x00\xfe\x1a\x00\x00\x00\xec\x03\x00\x00D\x1b\x00\x00\x00\xec\x03\x00\x00\x08\x1b\x00\x00\x00\xec\x03\x00\x00N\x1b\x00\x00\x00\xec\x03\x00\x00X\x1b\x00\x00\x00\xec\x03\x00\x000\x1b\x00\x00\x00\xec\x03\x00\x00:\x1b\x00\x00\x00\xeb\x03\x00\x00t\t\x00\x00\x00\xe9\x03\x00\x00\xf8\x11\x00\x00\x00\xe9\x03\x00\x00\x02\x12\x00\x00\x00\xe5\x03\x00\x00h\x01\x00\x00\x00\xe1\x03\x00\x00$\x13\x00\x00\x00\xda\x03\x00\x00\x90\x1a\x00\x00\x00\xda\x03\x00\x00\x9a\x1a\x00\x00\x00\xda\x03\x00\x00\xae\x1a\x00\x00\x00\xcb\x03\x00\x00F\x00\x00\x00\x00\xc4\x03\x00\x00\xc8\x19\x00\x00\x00\xc4\x03\x00\x00\xd2\x19\x00\x00\x00\xc1\x03\x00\x004\x08\x00\x00\x00\x8d\x03\x00\x00\x1e\x00\x00\x00\x00m\x03\x00\x00\xcc\x10\x00\x00\x00f\x03\x00\x00\xc0\x12\x00\x00\x00%\x03\x00\x00H\x08\x00\x00\x00!\x03\x00\x00F\x0f\x00\x00\x00!\x03\x00\x00\xce\x1d\x00\x00\x00!\x03\x00\x00P\x0f\x00\x00\x00!\x03\x00\x00x\x0f\x00\x00\x00\x12\x03\x00\x00\x04\x10\x00\x00\x00\x0c\x03\x00\x000\x11\x00\x00\x00\x0b\x03\x00\x00\xf6\x0e\x00\x00\x00\x0b\x03\x00\x00\x00\x0f\x00\x00\x00\xee\x02\x00\x00\xd3\x00\x00\x00\x00\xde\x02\x00\x00f\r\x00\x00\x00\xda\x02\x00\x00\xb8\x0b\x00\x00\x00\xda\x02\x00\x00\xc2\x0b\x00\x00\x00\xc5\x02\x00\x00\x14\x05\x00\x00\x00\x8b\x02\x00\x00l\x07\x00\x00\x00D\x02\x00\x00\x1d\x05\x00\x00\x00D\x02\x00\x00!\x05\x00\x00\x00\x02\x02\x00\x00\x82\x00\x00\x00\x00\xe1\x01\x00\x002\x00\x00\x00\x00\xe1\x01\x00\x00<\x00\x00\x00\x00\t\x01\x00\x00\\\x00\x00\x00'
"""

    return packet


def build_system_message(client_obj):

    packet = CMResponse(eMsgID = EMsg.ClientSystemIM, client_obj = client_obj)

    # Preparing packet data

    packet.data = struct.pack('<IQI',
                            SystemIMType.guestPassGranted,
                            12345,
                            0)

    return packet


def build_cmserver_list_response(client_obj):
    """
    Build a chat eMsgID packet with eMsgID 0x030F.

    :param client_obj: The Client object.
    :return: A ChatCommandPacket instance.
    """
    packet = CMResponse(eMsgID = EMsg.ClientCMList, client_obj = client_obj)

    """
    Constructs a buffer compatible with RecvMsgClientCMList function.

    :param ip_list: List of IP addresses as strings, e.g., ['192.168.1.1', '10.0.0.1']
    :return: bytes buffer to pass to the decompiled function
    """

    ip_list = [globalvars.public_ip]
    # Number of IP addresses in the message
    num_ips = len(ip_list)
    buffer = struct.pack('<I', num_ips)  # Header: Number of IP addresses as 4 bytes

    # Convert each IP to 4-byte format and append to the buffer
    for ip in ip_list:
        # Convert IP address from string to packed 4-byte format
        packed_ip = struct.pack('<I', int.from_bytes(map(int, ip.split('.')), 'little'))
        buffer += packed_ip

    serialized_buffer = buffer

    packet.data += bytes(serialized_buffer)

    return packet


def build_ClientEncryptPct_response(client_obj):
    """
    Build a chat eMsgID packet with eMsgID 0x0310.

    :param client_obj: The Client object.
    :return: A ChatCommandPacket instance.

    NOTE:
    between when clients started forcing encryption and 08/12/2007, official steam sent: \x64\x00\x00\x00
    """
    packet = CMResponse(eMsgID = EMsg.ClientEncryptPct, client_obj = client_obj)

    packet.data = struct.pack('<I',
                              0)  # always 0

    return packet


def build_General_response(client_obj, eResult):
    """
    Build a chat eMsgID packet with eMsgID 0x0310.

    :param client_obj: The Client object.
    :return: A ChatCommandPacket instance.
    """
    packet = CMResponse(eMsgID = EMsg.GenericReply, client_obj = client_obj)

    packet.data = struct.pack('<I',
                              eResult)

    return packet


def build_GeneralAck(client_obj, packet, client_address, cmserver_obj, eresult = b''):

    if client_obj.socket:  # TCP
        packet = CMResponse(eMsgID = EMsg.GenericReply, client_obj = client_obj)

        packet.data = struct.pack('<I', 1)
        packet.length = len(packet.data)
        cmserver_obj.sendReply(client_obj, [packet])
    else:  # UDP
        packet_reply = copy.copy(packet)
        packet_reply.packetid = b'\x07'
        packet_reply.size = 0
        packet_reply.data_len = 0
        packet_reply.destination_id = packet.source_id
        packet_reply.source_id = packet.destination_id  # Swap .to and .from_
        packet_reply.last_recv_seq = packet.sequence_num
        packet_reply.sequence_num = 0
        packet_reply.split_pkt_cnt = 0
        packet_reply.seq_of_first_pkt = 0
        packet_reply.data = eresult  # Assuming data should be an empty bytes object

        # Serialize the packet
        packet = packet_reply.serialize()

        cmserver_obj.socket.sendto(packet, client_address)


def build_ClientMarketingMessageUpdate(client_obj):

    packet = CMResponse(eMsgID = EMsg.ClientMarketingMessageUpdate, client_obj = client_obj)
    # Create a MsgClientMarketingMessageUpdate instance
    msg_update = MsgClientMarketingMessageUpdate()

    # Add marketing messages with message IDs
    # The message ID's below were taken from: 07/02/2009 16:06:06
    msg_update.add_marketing_message(18162464089635255)
    msg_update.add_marketing_message(18162464022650639)
    msg_update.add_marketing_message(18162464324102804)
    msg_update.add_marketing_message(18162464299885654)
    msg_update.add_marketing_message(18162464076565563)
    msg_update.add_marketing_message(18162464066945513)
    msg_update.add_marketing_message(18162464132608578)
    msg_update.add_marketing_message(18162464139811240)

    # Serialize the packet
    packet.data = msg_update.serialize()
    #packet.data = b'\xee\xdaLJ\x08\x00\x00\x00\xb7\xf9N4\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464089635255/\x00\x0f\xdfP0\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464022650639/\x00\x94\xaaHB\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464324102804/\x00V$\xd7@\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464299885654/\x00;\x8c\x873\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464076565563/\x00\xe9\xc1\xf42\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464066945513/\x00B\xb2\xde6\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464132608578/\x00\xa8\x99L7\xaa\x86@\x00http://cdn.store.steampowered.com/message/18162464139811240/\x00'

    return packet

def build_ClientRequestValidationMail_Response(client_obj, eresult):

    packet = CMResponse(eMsgID = EMsg.ClientRequestValidationMailResponse, client_obj = client_obj)

    packet.data = struct.pack('<I',
                              eresult)

    return packet


